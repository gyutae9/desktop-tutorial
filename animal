#include <iostream>
using namespace std;

template <typename T>
class SimpleVector {
private:
    T* data;        // 데이터를 저장할 배열
    int _size;      // 현재 원소의 개수
    int _capacity;  // 배열의 크기

public:
    // 기본 생성자: 크기가 10인 배열 생성
    SimpleVector() : _size(0), _capacity(10) {
        data = new T[_capacity];
    }

    // 크기를 지정하는 생성자
    SimpleVector(int capacity) : _size(0), _capacity(capacity) {
        data = new T[_capacity];
    }

    // 소멸자: 동적 배열 메모리 해제
    ~SimpleVector() {
        delete[] data;
    }

    // push_back: 배열의 끝에 원소 추가
    void push_back(const T& value) {
        if (_size < _capacity) {
            data[_size++] = value;
        }
    }

    // pop_back: 배열의 마지막 원소 제거
    void pop_back() {
        if (_size > 0) {
            --_size;
        }
    }

    // size: 현재 원소의 개수 반환
    int size() const {
        return _size;
    }

    // capacity: 배열의 크기 반환
    int capacity() const {
        return _capacity;
    }
};

int main() {
    SimpleVector<int> vec; // 기본 생성자 사용
    cout << "Capacity: " << vec.capacity() << endl;

    vec.push_back(10);
    vec.push_back(20);
    vec.push_back(30);

    cout << "Size after push_back: " << vec.size() << endl;

    vec.pop_back();
    cout << "Size after pop_back: " << vec.size() << endl;

    cout << "Capacity: " << vec.capacity() << endl;

    return 0;
}